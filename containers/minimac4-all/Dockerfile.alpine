FROM alpine:3.19

# Minimac4-all Alpine: Lightweight container for Azure
LABEL maintainer="AfriGen-D <info@afrigen.org>"
LABEL version="4.1.6-alpine"
LABEL description="Lightweight Minimac4 genotype imputation container optimized for Azure (Alpine Linux)"

# Set timezone and working directory
ENV TZ=UTC
WORKDIR /opt

# Install system dependencies and build tools
RUN apk add --no-cache \
    # Core build tools
    build-base \
    cmake \
    autoconf \
    automake \
    libtool \
    pkgconfig \
    git \
    # System libraries
    zlib-dev \
    bzip2-dev \
    xz-dev \
    curl-dev \
    openssl-dev \
    ncurses-dev \
    # Download tools
    wget \
    curl \
    unzip \
    bzip2 \
    tar \
    # Runtime dependencies
    ca-certificates \
    bash \
    # Python for scripts
    python3 \
    python3-dev \
    py3-pip

# Install Python packages for data processing
RUN pip3 install --no-cache-dir --break-system-packages \
    numpy \
    pandas \
    scipy \
    matplotlib \
    seaborn

# Build and install HTSlib (required for many genomics tools)
ENV HTSLIB_VERSION=1.19
RUN wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 \
        https://github.com/samtools/htslib/releases/download/${HTSLIB_VERSION}/htslib-${HTSLIB_VERSION}.tar.bz2 && \
    tar -xjf htslib-${HTSLIB_VERSION}.tar.bz2 && \
    cd htslib-${HTSLIB_VERSION} && \
    ./configure --prefix=/usr/local && \
    make -j$(nproc) && \
    make install && \
    cd .. && \
    rm -rf htslib-${HTSLIB_VERSION}*

# Build and install SAMtools
ENV SAMTOOLS_VERSION=1.19
RUN wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 \
        https://github.com/samtools/samtools/releases/download/${SAMTOOLS_VERSION}/samtools-${SAMTOOLS_VERSION}.tar.bz2 && \
    tar -xjf samtools-${SAMTOOLS_VERSION}.tar.bz2 && \
    cd samtools-${SAMTOOLS_VERSION} && \
    ./configure --prefix=/usr/local && \
    make -j$(nproc) && \
    make install && \
    cd .. && \
    rm -rf samtools-${SAMTOOLS_VERSION}*

# Build and install BCFtools
ENV BCFTOOLS_VERSION=1.19
RUN wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 \
        https://github.com/samtools/bcftools/releases/download/${BCFTOOLS_VERSION}/bcftools-${BCFTOOLS_VERSION}.tar.bz2 && \
    tar -xjf bcftools-${BCFTOOLS_VERSION}.tar.bz2 && \
    cd bcftools-${BCFTOOLS_VERSION} && \
    ./configure --prefix=/usr/local && \
    make -j$(nproc) && \
    make install && \
    cd .. && \
    rm -rf bcftools-${BCFTOOLS_VERSION}*

# Install VCFtools
ENV VCFTOOLS_VERSION=0.1.16
RUN wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 \
        https://github.com/vcftools/vcftools/releases/download/v${VCFTOOLS_VERSION}/vcftools-${VCFTOOLS_VERSION}.tar.gz && \
    tar -xzf vcftools-${VCFTOOLS_VERSION}.tar.gz && \
    cd vcftools-${VCFTOOLS_VERSION} && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local && \
    make -j$(nproc) && \
    make install && \
    cd .. && \
    rm -rf vcftools-${VCFTOOLS_VERSION}*

# Build Minimac4 from source for maximum compatibility
ENV MINIMAC4_VERSION=4.1.6
RUN git clone --depth 1 --branch v${MINIMAC4_VERSION} https://github.com/statgen/Minimac4.git && \
    cd Minimac4 && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local .. && \
    make -j$(nproc) && \
    make install && \
    cd ../.. && \
    rm -rf Minimac4

# Install BEDtools (for genomic interval operations)
RUN wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 \
        https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz && \
    tar -xzf bedtools-2.31.1.tar.gz && \
    cd bedtools2 && \
    make -j$(nproc) && \
    mv bin/* /usr/local/bin/ && \
    cd .. && \
    rm -rf bedtools-2.31.1.tar.gz bedtools2

# Install Eagle (phasing tool)
ENV EAGLE_VERSION=2.4.1
RUN wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 \
        https://alkesgroup.broadinstitute.org/Eagle/downloads/Eagle_v${EAGLE_VERSION}.tar.gz && \
    tar -xzf Eagle_v${EAGLE_VERSION}.tar.gz && \
    mv Eagle_v${EAGLE_VERSION}/eagle /usr/local/bin/ && \
    chmod +x /usr/local/bin/eagle && \
    rm -rf Eagle_v${EAGLE_VERSION}*

# Create working directories
RUN mkdir -p /data/{input,output,reference,temp} && \
    mkdir -p /scripts && \
    mkdir -p /logs

# Create non-root user for security
RUN adduser -D -s /bin/bash impuser && \
    chown -R impuser:impuser /data /scripts /logs

# Set environment variables
ENV PATH="/usr/local/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"

# Create comprehensive testing script
RUN echo '#!/bin/bash' > /usr/local/bin/test-minimac4-all && \
    echo 'echo "=== Minimac4-All Alpine Container Test ==="' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "🏠 Container: $(hostname)"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "👤 User: $(whoami)"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "📁 Working directory: $(pwd)"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo ""' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "🧬 Core Genomics Tools:"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "  Minimac4: $(minimac4 --version 2>&1 | head -1 || echo "minimac4 available")"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "  SAMtools: $(samtools --version | head -1)"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "  BCFtools: $(bcftools --version | head -1)"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "  VCFtools: $(vcftools --version 2>&1 | head -1)"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "  HTSlib (tabix): $(tabix 2>&1 | head -1)"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "  BEDtools: $(bedtools --version)"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "  Eagle: $(eagle 2>&1 | head -3 | tail -1 || echo "eagle available")"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo ""' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "🐍 Python Environment:"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "  Python: $(python3 --version)"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "  NumPy: $(python3 -c \"import numpy; print(f\\"numpy {numpy.__version__}\\")\"")"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "  Pandas: $(python3 -c \"import pandas; print(f\\"pandas {pandas.__version__}\\")\"")"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo ""' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "✅ Minimac4-All Alpine container ready for Azure!"' >> /usr/local/bin/test-minimac4-all && \
    echo 'echo "🎯 Lightweight & comprehensive genotype imputation tools"' >> /usr/local/bin/test-minimac4-all && \
    chmod +x /usr/local/bin/test-minimac4-all

# Create welcome message
RUN echo 'echo "🧬 Minimac4-All Alpine for Azure"' > /etc/profile.d/welcome.sh && \
    echo 'echo "Lightweight comprehensive genotype imputation environment"' >> /etc/profile.d/welcome.sh && \
    echo 'echo "Run test-minimac4-all to verify installations"' >> /etc/profile.d/welcome.sh && \
    echo 'echo "Working directory: /data"' >> /etc/profile.d/welcome.sh

# Set default working directory and user
WORKDIR /data
USER impuser

# Set default command
CMD ["/bin/bash", "-l"] 
name: Build PLINK2 Container

# TEMPORARILY DISABLED - Enable after core Alpine containers are proven to work
# on:
#   push:
#     branches: [ main, master, develop ]
#     paths:
#       - 'containers/plink2/**'
#       - '.github/workflows/docker-build-plink2.yml'
#   pull_request:
#     branches: [ main, master ]
#     paths:
#       - 'containers/plink2/**'
#       - '.github/workflows/docker-build-plink2.yml'
#   release:
#     types: [published]
#   schedule:
#     # Weekly build every Sunday at 3 AM UTC
#     - cron: '0 3 * * 0'
#   workflow_dispatch:
#     inputs:
#       tag:
#         description: 'Docker tag to use (default: plink2-2.0.0)'
#         required: false
#         default: 'plink2-2.0.0'

# Placeholder trigger to prevent workflow from running
on:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build PLINK2 container (prebuilt binary)'
        required: true
        default: 'false'

env:
  GHCR_REGISTRY: ghcr.io
  # DOCKERHUB_REGISTRY: docker.io  # Commented out - add Docker Hub secrets to enable
  IMAGE_PREFIX: ${{ github.repository_owner }}
  CONTAINER_NAME: plink2

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Uncomment when Docker Hub secrets are added (see DOCKER_HUB_SETUP.md)
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.DOCKERHUB_REGISTRY }}
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.CONTAINER_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=plink2-2.0.0,enable={{is_default_branch}}
            type=raw,value=plink2-2.0.0-alpine,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule,pattern={{date 'YYYY-MM-DD'}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: containers/${{ env.CONTAINER_NAME }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ env.CONTAINER_NAME }}
          cache-to: type=gha,mode=max,scope=${{ env.CONTAINER_NAME }}
          provenance: true
          sbom: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.CONTAINER_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        registry: 
          - ghcr.io
          # Uncomment when Docker Hub secrets are added:
          # - docker.io
    
    steps:
      - name: Test PLINK2 container
        run: |
          IMAGE="${{ matrix.registry }}/${{ env.IMAGE_PREFIX }}/${{ env.CONTAINER_NAME }}:plink2-2.0.0"
          echo "Testing: $IMAGE"
          
          # Test basic functionality
          docker run --rm "$IMAGE" plink2 --help
          docker run --rm "$IMAGE" plink2 --version
          
          # Test that binary exists and is executable
          docker run --rm "$IMAGE" bash -c "which plink2 && ls -la /usr/local/bin/plink2"
          
          echo "‚úÖ PLINK2 container tests passed for ${{ matrix.registry }}"

      - name: Test container size
        run: |
          IMAGE="${{ matrix.registry }}/${{ env.IMAGE_PREFIX }}/${{ env.CONTAINER_NAME }}:plink2-2.0.0"
          SIZE=$(docker image inspect "$IMAGE" --format='{{.Size}}')
          SIZE_MB=$((SIZE / 1024 / 1024))
          echo "üì¶ Container size: ${SIZE_MB} MB"
          
          if [ $SIZE_MB -gt 200 ]; then
            echo "‚ö†Ô∏è Warning: Container size (${SIZE_MB} MB) exceeds expected maximum (200 MB)"
          else
            echo "‚úÖ Container size is within expected limits"
          fi

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        registry: 
          - ghcr.io
          # Uncomment when Docker Hub secrets are added:
          # - docker.io
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.registry }}/${{ env.IMAGE_PREFIX }}/${{ env.CONTAINER_NAME }}:plink2-2.0.0
          format: 'sarif'
          output: 'trivy-results-${{ env.CONTAINER_NAME }}-${{ matrix.registry }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ env.CONTAINER_NAME }}-${{ matrix.registry }}.sarif'

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 10 
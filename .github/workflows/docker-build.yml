name: Build Genotype Imputation Containers

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'containers/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'containers/**'
      - '.github/workflows/docker-build.yml'
  release:
    types: [published]
  schedule:
    # Weekly build every Sunday at 2 AM UTC to maintain tool version tags
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to use (default: tool versions like bcftools-1.20)'
        required: false
        default: 'alpine-3.18'

env:
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  GHCR_IMAGE_PREFIX: ${{ github.repository_owner }}
  DOCKERHUB_IMAGE_PREFIX: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      containers: ${{ steps.containers.outputs.containers }}
      tag: ${{ steps.tag.outputs.tag }}
      should_push: ${{ steps.push.outputs.should_push }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine containers to build
        id: containers
        run: |
          # Build reliable Alpine-based containers (plink2 and analysis have dedicated workflows)
          # All containers re-enabled after successful minimac4-all troubleshooting
          CUSTOM_CONTAINERS='["eagle-phasing", "minimac4", "minimac4-all", "imputation", "phasing", "vcf-processing", "r-analysis"]'
          # Temporarily excluding: ["eagle-vcf-processing"] (still has issues)
          echo "containers=${CUSTOM_CONTAINERS}" >> $GITHUB_OUTPUT

      - name: Determine tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            TAG="${{ github.event.release.tag_name }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            TAG="alpine-3.18"  # Base Alpine version tag
          else
            TAG="pr-${{ github.event.number }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Determine if should push
        id: push
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_push=false" >> $GITHUB_OUTPUT
          else
            echo "should_push=true" >> $GITHUB_OUTPUT
          fi

  build-custom:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.prepare.outputs.containers) }}
    
    name: Build ${{ matrix.container }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set container-specific tool versions
        id: tool-versions
        run: |
          # Set tool version tags based on container type (only core Alpine containers)
          case "${{ matrix.container }}" in
            "eagle-phasing")
              PRIMARY_VERSION="eagle-2.4.1"
              ADDITIONAL_TAGS="htslib-1.20"
              ;;
            "minimac4")
              PRIMARY_VERSION="minimac4-4.1.6"
              ADDITIONAL_TAGS="alpine-3.18"
              ;;
            "minimac4-all")
              PRIMARY_VERSION="minimac4-4.1.6-all"
              ADDITIONAL_TAGS="azure,samtools-1.19,bcftools-1.19,vcftools-0.1.16,eagle-2.4.1"
              ;;
            "imputation")
              PRIMARY_VERSION="minimac4-4.1.6"
              ADDITIONAL_TAGS="bcftools-1.20,vcftools-0.1.16"
              ;;
            "phasing")
              PRIMARY_VERSION="eagle-2.4.1"
              ADDITIONAL_TAGS="htslib-1.20"
              ;;
            "vcf-processing")
              PRIMARY_VERSION="bcftools-1.20"
              ADDITIONAL_TAGS="vcftools-0.1.16,htslib-1.20"
              ;;
            "eagle-vcf-processing")
              PRIMARY_VERSION="eagle-2.4.1"
              ADDITIONAL_TAGS="bcftools-1.20,vcftools-0.1.16,htslib-1.20"
              ;;
            "r-analysis")
              PRIMARY_VERSION="1.0"
              ADDITIONAL_TAGS="r-4.3.2,dplyr,ggplot2,data.table"
              ;;
          esac
          
          echo "primary_version=${PRIMARY_VERSION}" >> $GITHUB_OUTPUT
          echo "additional_tags=${ADDITIONAL_TAGS}" >> $GITHUB_OUTPUT
          echo "full_version=${PRIMARY_VERSION}-alpine" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: needs.prepare.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: needs.prepare.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_PREFIX }}/${{ matrix.container }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_PREFIX }}/${{ matrix.container }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=${{ steps.tool-versions.outputs.primary_version }},enable={{is_default_branch}}
            type=raw,value=${{ steps.tool-versions.outputs.full_version }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.prepare.outputs.tag }}
            type=schedule,pattern={{date 'YYYY-MM-DD'}}

      - name: Check if container directory exists
        run: |
          if [[ ! -d "containers/${{ matrix.container }}" ]]; then
            echo "Error: Container directory containers/${{ matrix.container }} does not exist"
            exit 1
          fi
          if [[ ! -f "containers/${{ matrix.container }}/Dockerfile" ]]; then
            echo "Error: Dockerfile not found in containers/${{ matrix.container }}"
            exit 1
          fi

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: containers/${{ matrix.container }}
          platforms: linux/amd64
          push: ${{ needs.prepare.outputs.should_push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.container }}
          cache-to: type=gha,mode=max,scope=${{ matrix.container }}
          provenance: true
          sbom: true

      - name: Generate artifact attestation
        if: needs.prepare.outputs.should_push == 'true'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_PREFIX }}/${{ matrix.container }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Generate Docker Hub artifact attestation
        if: needs.prepare.outputs.should_push == 'true'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_PREFIX }}/${{ matrix.container }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Make package public
        if: needs.prepare.outputs.should_push == 'true'
        run: |
          # Make the package public using GitHub CLI
          # Note: This requires the package to exist first
          sleep 30  # Wait for package to be fully registered
          
          # Try to make package public (works for user repositories)
          gh api --method PATCH /users/${{ github.repository_owner }}/packages/container/${{ matrix.container }} \
            -H "Accept: application/vnd.github.v3+json" \
            -f visibility=public \
            || echo "⚠️  Could not make package public automatically. Please set to public manually in package settings."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # TEMPORARILY COMMENTED OUT - Re-enable after packages are public
  # test-containers:
  #   needs: [prepare, build-custom]
  #   runs-on: ubuntu-latest
  #   if: needs.prepare.outputs.should_push == 'true'
  #   strategy:
  #     matrix:
  #       container: ${{ fromJson(needs.prepare.outputs.containers) }}
  #   
  #   name: Test ${{ matrix.container }}
  #   
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Set container tool versions for testing
  #       id: tool-versions
  #       run: |
  #         # Set tool version tags based on container type (only core Alpine containers)
  #         case "${{ matrix.container }}" in
  #           "eagle-phasing")
  #             PRIMARY_VERSION="eagle-2.4.1"
  #             ;;
  #           "minimac4")
  #             PRIMARY_VERSION="minimac4-4.1.6"
  #             ;;
  #           "imputation")
  #             PRIMARY_VERSION="minimac4-4.1.6"
  #             ;;
  #           "phasing")
  #             PRIMARY_VERSION="eagle-2.4.1"
  #             ;;
  #           "vcf-processing")
  #             PRIMARY_VERSION="bcftools-1.20"
  #             ;;
  #         esac
  #         echo "primary_version=${PRIMARY_VERSION}" >> $GITHUB_OUTPUT
  #
  #     - name: Test container
  #       run: |
  #         CONTAINER_IMAGE="${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.container }}:${{ steps.tool-versions.outputs.primary_version }}"
  #         
  #         echo "Testing container: $CONTAINER_IMAGE"
  #         
  #         # Pull the container
  #         docker pull "$CONTAINER_IMAGE"
  #         
  #         # Basic functionality tests (only core Alpine containers)
  #         case "${{ matrix.container }}" in
  #           "eagle-phasing")
  #             echo "Testing Eagle..."
  #             docker run --rm "$CONTAINER_IMAGE" eagle --help
  #             # Test that the binary works
  #             docker run --rm "$CONTAINER_IMAGE" bash -c "which eagle && eagle --help | head -5"
  #             ;;
  #           "minimac4")
  #             echo "Testing Minimac4..."
  #             docker run --rm "$CONTAINER_IMAGE" minimac4 --help
  #             # Test that the binary works  
  #             docker run --rm "$CONTAINER_IMAGE" bash -c "which minimac4 && minimac4 --help | head -5"
  #             ;;
  #           "imputation")
  #             echo "Testing Imputation container..."
  #             docker run --rm "$CONTAINER_IMAGE" bash -c "
  #               echo 'Testing Minimac4...' && minimac4 --help > /dev/null && echo 'Minimac4 OK' &&
  #               echo 'Testing BCFtools...' && bcftools --version &&
  #               echo 'Testing VCFtools...' && vcftools --version &&
  #               echo 'Imputation tools working!'
  #             "
  #             ;;
  #           "phasing")
  #             echo "Testing Phasing container..."
  #             docker run --rm "$CONTAINER_IMAGE" bash -c "
  #               echo 'Testing Eagle...' && eagle --help > /dev/null && echo 'Eagle OK' &&
  #               echo 'Testing tabix...' && tabix --help > /dev/null && echo 'tabix OK' &&
  #               echo 'Phasing tools working!'
  #             "
  #             ;;
  #           "vcf-processing")
  #             echo "Testing VCF Processing container..."
  #             docker run --rm "$CONTAINER_IMAGE" bash -c "
  #               echo 'Testing BCFtools...' && bcftools --version &&
  #               echo 'Testing VCFtools...' && vcftools --version &&
  #               echo 'Testing tabix...' && tabix --help > /dev/null && echo 'tabix OK' &&
  #               echo 'VCF processing tools working!'
  #             "
  #             ;;
  #         esac
  #         
  #         echo "✅ Container ${{ matrix.container }} passed basic tests"
  #
  #     - name: Test container size
  #       run: |
  #         CONTAINER_IMAGE="${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.container }}:${{ steps.tool-versions.outputs.primary_version }}"
  #         SIZE=$(docker image inspect "$CONTAINER_IMAGE" --format='{{.Size}}')
  #         SIZE_MB=$((SIZE / 1024 / 1024))
  #         echo "📦 Container ${{ matrix.container }} size: ${SIZE_MB} MB"
  #         
  #         # Set reasonable size limits for core Alpine containers (much smaller than Ubuntu)
  #         case "${{ matrix.container }}" in
  #           "eagle-phasing")
  #             MAX_SIZE=400  # Eagle + HTSlib
  #             ;;
  #           "minimac4")
  #             MAX_SIZE=500  # Minimac4 binary
  #             ;;
  #           "imputation")
  #             MAX_SIZE=600  # Minimac4 + BCFtools + VCFtools
  #             ;;
  #           "phasing")
  #             MAX_SIZE=400  # Eagle + HTSlib
  #             ;;
  #           "vcf-processing")
  #             MAX_SIZE=300  # BCFtools + VCFtools + tabix
  #             ;;
  #         esac
  #         
  #         if [ $SIZE_MB -gt $MAX_SIZE ]; then
  #           echo "⚠️ Warning: Container size (${SIZE_MB} MB) exceeds expected maximum (${MAX_SIZE} MB)"
  #         else
  #           echo "✅ Container size is within expected limits"
  #         fi

  # TEMPORARILY COMMENTED OUT - Re-enable after packages are public
  # security-scan:
  #   needs: [prepare, build-custom]
  #   runs-on: ubuntu-latest
  #   if: needs.prepare.outputs.should_push == 'true'
  #   strategy:
  #     matrix:
  #       container: ${{ fromJson(needs.prepare.outputs.containers) }}
  #   
  #   name: Security scan ${{ matrix.container }}
  #   
  #   steps:
  #     - name: Set container tool versions for security scan
  #       id: tool-versions
  #       run: |
  #         # Set tool version tags based on container type (only core Alpine containers)
  #         case "${{ matrix.container }}" in
  #           "eagle-phasing")
  #             PRIMARY_VERSION="eagle-2.4.1"
  #             ;;
  #           "minimac4")
  #             PRIMARY_VERSION="minimac4-4.1.6"
  #             ;;
  #           "imputation")
  #             PRIMARY_VERSION="minimac4-4.1.6"
  #             ;;
  #           "phasing")
  #             PRIMARY_VERSION="eagle-2.4.1"
  #             ;;
  #           "vcf-processing")
  #             PRIMARY_VERSION="bcftools-1.20"
  #             ;;
  #         esac
  #         echo "primary_version=${PRIMARY_VERSION}" >> $GITHUB_OUTPUT
  #
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.container }}:${{ steps.tool-versions.outputs.primary_version }}
  #         format: 'sarif'
  #         output: 'trivy-results-${{ matrix.container }}.sarif'
  #
  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: 'trivy-results-${{ matrix.container }}.sarif'

  check-external-containers:
    runs-on: ubuntu-latest
    name: Check external containers
    
    steps:
      - name: Check external container availability
        run: |
          echo "🔍 Checking availability of external containers..."
          
          external_containers=(
            "ghcr.io/wtsi-npg/samtools:latest"
            "quay.io/biocontainers/vcftools:latest"
            "python:3.11-slim"
            "bioconductor/bioconductor_docker:latest"
          )
          
          for container in "${external_containers[@]}"; do
            echo "Checking $container..."
            if docker manifest inspect "$container" >/dev/null 2>&1; then
              echo "✅ $container is available"
            else
              echo "❌ $container is not available"
            fi
          done

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 10

  summary:
    needs: [prepare, build-custom, check-external-containers, cleanup]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "## 🐳 Alpine Linux Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tagging Strategy:** Tool versions (e.g., bcftools-1.20, minimac4-4.1.6)" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_PREFIX }}\` and \`${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_PREFIX }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** linux/amd64 (HPC optimized)" >> $GITHUB_STEP_SUMMARY
          echo "**Base OS:** Alpine Linux 3.18 (lightweight and secure)" >> $GITHUB_STEP_SUMMARY
          echo "**Push to registry:** ${{ needs.prepare.outputs.should_push }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check build status
          BUILD_STATUS="${{ needs.build-custom.result }}"
          
          if [[ "$BUILD_STATUS" == "success" ]]; then
            echo "### ✅ Core Alpine Containers (Available on GHCR & Docker Hub):" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ \`eagle-phasing:eagle-2.4.1\` (Eagle 2.4.1 + HTSlib 1.20)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ \`minimac4:minimac4-4.1.6\` (Minimac4 4.1.6)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ \`imputation:minimac4-4.1.6\` (Minimac4 4.1.6 + BCFtools 1.20 + VCFtools 0.1.16)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ \`phasing:eagle-2.4.1\` (Eagle 2.4.1 + HTSlib 1.20)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ \`vcf-processing:bcftools-1.20\` (BCFtools 1.20 + VCFtools 0.1.16 + tabix)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ \`r-analysis:1.0\` (R 4.3.2 + dplyr + ggplot2 + data.table)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚧 Temporarily Disabled (Enable After Core Success):" >> $GITHUB_STEP_SUMMARY
            echo "- 🔸 \`all-in-one:alpine-3.18\` (Complex Debian + BCFtools 1.22)" >> $GITHUB_STEP_SUMMARY
            echo "- 🔸 \`analysis:bcftools-1.20\` (Complex Python + R + BCFtools)" >> $GITHUB_STEP_SUMMARY
            echo "- 🔸 \`plink2:plink2-2.0.0\` (Prebuilt binary approach)" >> $GITHUB_STEP_SUMMARY
            echo "- 🔸 \`test-containers\` (Tests temporarily disabled)" >> $GITHUB_STEP_SUMMARY
            echo "- 🔸 \`security-scan\` (Security scans temporarily disabled)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Container Build Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 External Containers (Use Directly):" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/wtsi-npg/samtools:latest\` (BCFtools, SAMtools, HTSlib)" >> $GITHUB_STEP_SUMMARY
          echo "- \`quay.io/biocontainers/vcftools:latest\` (VCFtools)" >> $GITHUB_STEP_SUMMARY
          echo "- \`python:3.11-slim\` (Python environment)" >> $GITHUB_STEP_SUMMARY
          echo "- \`bioconductor/bioconductor_docker:latest\` (R environment)" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 How to Use:" >> $GITHUB_STEP_SUMMARY
          echo "**GitHub Container Registry:** \`docker pull ghcr.io/${{ env.GHCR_IMAGE_PREFIX }}/CONTAINER:TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Hub:** \`docker pull ${{ env.DOCKERHUB_IMAGE_PREFIX }}/CONTAINER:TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "All containers built successfully and pushed to both registries. Tests and security scans are temporarily disabled for faster builds." >> $GITHUB_STEP_SUMMARY

      - name: Failure Summary
        if: failure()
        run: |
          echo "## ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Some containers failed to build or test. Check the individual job logs for details:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status:** ${{ needs.build-custom.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Status:** Temporarily disabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Troubleshooting Tips:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check individual container build logs" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify Dockerfile syntax and dependencies" >> $GITHUB_STEP_SUMMARY
          echo "3. Test builds locally with \`./build-custom.sh\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Check if base images are accessible" >> $GITHUB_STEP_SUMMARY 